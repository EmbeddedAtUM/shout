package org.whispercomm.shout.network;

import java.io.UnsupportedEncodingException;

import org.json.JSONException;
import org.json.JSONObject;

import android.util.Base64;

/**
 * Network protocol message of SHOUT communicated through the MANES network
 * 
 * @author Yue Liu
 * 
 */
public class NetworkShout extends JSONObject {

	/**
	 * 
	 * Constructor. All Strings in this class are Base64 encoded.
	 * 
	 * @param date
	 *            date (epoch format) when the shout is generated
	 * @param user_name
	 *            originator of this shout
	 * @param public_key
	 *            public key of the originator
	 * @param serial_num
	 *            shout serial number of the originator
	 * @param content
	 *            content
	 * @param signature
	 *            digital signature of the shout
	 * @throws JSONException
	 */
	public NetworkShout(long date, String user_name, String public_key,
			int serial_num, String content, String signature)
			throws JSONException {
		super();
		// generate this.data
		JSONObject data = new JSONObject();
		data.put("date", date);
		data.put("user_name", user_name);
		data.put("public_key", public_key);
		data.put("serial_num", serial_num);
		data.put("content", content);
		this.put("data", data);
		// put digital signature
		this.put("signature", signature);
	}

	/**
	 * Generate a Shout object from the byte[] received from MANES network
	 * 
	 * @param shoutBytes
	 *            byte[] representation of Shout object, as generated by
	 *            toBytes()
	 * @throws UnsupportedEncodingException
	 * @throws JSONException
	 */
	public NetworkShout(byte[] shoutBytes) throws UnsupportedEncodingException,
			JSONException {
		super(new String(shoutBytes, "UTF8"));
	}

	/**
	 * Check whether a network-received Shout object is valid
	 * 
	 * @throws JSONException
	 */
	public boolean isValid() throws JSONException {
		if (this.has("data") == false)
			return false;
		if (this.has("signature") == false)
			return false;
		JSONObject data = this.getJSONObject("data");
		if (data.has("date") == false)
			return false;
		if (data.has("user_name") == false)
			return false;
		if (data.has("public_key") == false)
			return false;
		if (data.has("serial_num") == false)
			return false;
		if (data.has("content") == false)
			return false;
		return true;
	}

	public JSONObject getData() throws JSONException {
		return this.getJSONObject("data");
	}

	public String getSignature() throws JSONException {
		return this.getString("signature");
	}

	public long getDate() throws JSONException {
		return this.getJSONObject("data").getLong("date");
	}

	public String getUserName() throws JSONException {
		return this.getJSONObject("data").getString("user_name");
	}

	public String getPubKey() throws JSONException {
		return this.getJSONObject("data").getString("public_key");
	}

	public int getSerialNUm() throws JSONException {
		return this.getJSONObject("data").getInt("serial_num");
	}

	public String getContent() throws JSONException {
		return this.getJSONObject("data").getString("content");
	}

	/**
	 * Generate signature for this.data
	 * 
	 * @return Base64 encoded digital signature
	 * @throws UnsupportedEncodingException
	 * @throws JSONException
	 */
	public String genSignature() throws UnsupportedEncodingException,
			JSONException {
		JSONObject data = getData();
		byte[] dataBytes = data.toString().getBytes("UTF8");
		// TODO generate the signature
		return null;
	}

	/**
	 * 
	 * @return whether this.signature is indeed the signature of this.data
	 * @throws JSONException
	 * @throws UnsupportedEncodingException
	 */
	public boolean verySignature() throws JSONException,
			UnsupportedEncodingException {
		// Get the data
		JSONObject data = getData();
		byte[] dataBytes = data.toString().getBytes("UTF8");
		// get the public key
		String pubKeyString = getPubKey();
		byte[] pubKeyBytes = Base64.decode(pubKeyString, Base64.DEFAULT);
		// get the signature
		String sigString = getSignature();
		byte[] sigBytes = Base64.decode(sigString, Base64.DEFAULT);
		// TODO now run verification algorithm
		return true;
	}

	/**
	 * 
	 * Get the UTF-8 encoded byte[] representation of this shout
	 * 
	 * @throws UnsupportedEncodingException
	 */
	public byte[] toBytes() throws UnsupportedEncodingException {
		String string = this.toString();
		return string.getBytes("UTF8");
	}
}
