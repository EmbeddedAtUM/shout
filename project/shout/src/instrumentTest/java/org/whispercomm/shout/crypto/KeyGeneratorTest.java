
package org.whispercomm.shout.crypto;

import java.math.BigInteger;
import java.security.spec.InvalidKeySpecException;

import org.junit.Before;
import org.junit.Test;
import org.spongycastle.crypto.params.ECDomainParameters;
import org.spongycastle.crypto.params.ECPrivateKeyParameters;
import org.spongycastle.crypto.params.ECPublicKeyParameters;
import org.spongycastle.math.ec.ECPoint;
import org.spongycastle.util.encoders.Hex;

import static org.junit.Assert.*;
import static org.hamcrest.CoreMatchers.*;

public class KeyGeneratorTest {

	private KeyGenerator generator;

	@Before
	public void setup() {
		generator = new KeyGenerator();
	}

	@Test
	public void testGenerateKeyPair() {
		ECKeyPair pair = generator.generateKeyPair();
		ECPublicKeyParameters publicKey = pair.getPublicKey().getECPublicKeyParameters();
		ECPrivateKeyParameters privateKey = pair.getPrivateKey().getECPrivateKeyParameters();

		assertThat(publicKey.getParameters(), is(equalTo(CryptoParams.DOMAIN_PARAMS)));
		assertThat(privateKey.getParameters(), is(equalTo(CryptoParams.DOMAIN_PARAMS)));
	}

	@Test
	public void testGeneratePublicKeyFromXAndY() {
		ECDomainParameters domain = CryptoParams.DOMAIN_PARAMS;
		BigInteger x = new BigInteger(
				Hex.decode("008101ece47464a6ead70cf69a6e2bd3d88691a3262d22cba4f7635eaff26680a8"));
		BigInteger y = new BigInteger(
				Hex.decode("00d8a12ba61d599235f67d9cb4d58f1783d3ca43e78f0a5abaa624079936c0c3a9"));

		ECPoint point = domain.getCurve().createPoint(x, y, false);
		ECPublicKey key = new ECPublicKey(new ECPublicKeyParameters(point,
				domain));

		assertThat(generator.generatePublic(x, y), is(key));
	}

	@Test
	public void testPublicKeyEncoding() {
		ECDomainParameters domain = CryptoParams.DOMAIN_PARAMS;
		BigInteger x = new BigInteger(
				Hex.decode("008101ece47464a6ead70cf69a6e2bd3d88691a3262d22cba4f7635eaff26680a8"));
		BigInteger y = new BigInteger(
				Hex.decode("00d8a12ba61d599235f67d9cb4d58f1783d3ca43e78f0a5abaa624079936c0c3a9"));

		ECPoint point = domain.getCurve().createPoint(x, y, false);
		ECPublicKey key = new ECPublicKey(new ECPublicKeyParameters(point,
				domain));

		byte[] encoded = Hex
				.decode
		assertThat(KeyGenerator.encodePublic(key), is(encoded));
	}

	@Test
	public void testPublicKeyDecoding() throws InvalidKeySpecException {
		byte[] encoded = Hex
				.decode

		ECDomainParameters domain = CryptoParams.DOMAIN_PARAMS;
		BigInteger x = new BigInteger(1,
				Hex.decode("8101ece47464a6ead70cf69a6e2bd3d88691a3262d22cba4f7635eaff26680a8"));
		BigInteger y = new BigInteger(1,
				Hex.decode("d8a12ba61d599235f67d9cb4d58f1783d3ca43e78f0a5abaa624079936c0c3a9"));

		ECPoint point = domain.getCurve().createPoint(x, y, false);
		ECPublicKey key = new ECPublicKey(new ECPublicKeyParameters(point,
				domain));

		assertThat(KeyGenerator.generatePublic(encoded), is(key));
	}

	@Test(expected = InvalidKeySpecException.class)
	public void testPublicKeyDecodingThrowsInvalidKeySpecException() throws InvalidKeySpecException {
		byte[] encoded = Hex
				.decode
		KeyGenerator.generatePublic(encoded);
	}

	@Test
	public void testPrivateKeyEncoding() {
		ECDomainParameters domain = CryptoParams.DOMAIN_PARAMS;
		BigInteger d = new BigInteger(1,
				Hex.decode("70a12c2db16845ed56ff68cfc21a472b3f04d7d6851bf6349f2d7d5b3452b38a"));

		ECPrivateKey key = new ECPrivateKey(new ECPrivateKeyParameters(d, domain));

		byte[] encoded = Hex
				.decode
		assertThat(KeyGenerator.encodePrivate(key), is(encoded));
	}

	@Test
	public void testPrivateKeyDecoding() throws InvalidKeySpecException {
		byte[] encoded = Hex
				.decode

		ECDomainParameters domain = CryptoParams.DOMAIN_PARAMS;
		BigInteger d = new BigInteger(1,
				Hex.decode("70a12c2db16845ed56ff68cfc21a472b3f04d7d6851bf6349f2d7d5b3452b38a"));

		ECPrivateKey key = new ECPrivateKey(new ECPrivateKeyParameters(d, domain));
		assertThat(KeyGenerator.generatePrivate(encoded), is(key));
	}

	@Test(expected = InvalidKeySpecException.class)
	public void testPrivateKeyDecodingThrowsInvalidKeySpecException()
			throws InvalidKeySpecException {
		byte[] badEncoded = Hex
				.decode
		KeyGenerator.generatePrivate(badEncoded);
	}

}
